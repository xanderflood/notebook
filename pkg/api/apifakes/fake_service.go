// Code generated by counterfeiter. DO NOT EDIT.
package apifakes

import (
	"net/http"
	"sync"

	"github.com/xanderflood/notebook/pkg/api"
)

type FakeService struct {
	GetItemsStub        func(w http.ResponseWriter, r *http.Request)
	getItemsMutex       sync.RWMutex
	getItemsArgsForCall []struct {
		w http.ResponseWriter
		r *http.Request
	}
	GetEntriesStub        func(w http.ResponseWriter, r *http.Request)
	getEntriesMutex       sync.RWMutex
	getEntriesArgsForCall []struct {
		w http.ResponseWriter
		r *http.Request
	}
	GetItemStub        func(w http.ResponseWriter, r *http.Request)
	getItemMutex       sync.RWMutex
	getItemArgsForCall []struct {
		w http.ResponseWriter
		r *http.Request
	}
	GetEntryStub        func(w http.ResponseWriter, r *http.Request)
	getEntryMutex       sync.RWMutex
	getEntryArgsForCall []struct {
		w http.ResponseWriter
		r *http.Request
	}
	CreateItemStub        func(w http.ResponseWriter, r *http.Request)
	createItemMutex       sync.RWMutex
	createItemArgsForCall []struct {
		w http.ResponseWriter
		r *http.Request
	}
	CreateEntryStub        func(w http.ResponseWriter, r *http.Request)
	createEntryMutex       sync.RWMutex
	createEntryArgsForCall []struct {
		w http.ResponseWriter
		r *http.Request
	}
	UpdateItemStub        func(w http.ResponseWriter, r *http.Request)
	updateItemMutex       sync.RWMutex
	updateItemArgsForCall []struct {
		w http.ResponseWriter
		r *http.Request
	}
	UpdateEntryStub        func(w http.ResponseWriter, r *http.Request)
	updateEntryMutex       sync.RWMutex
	updateEntryArgsForCall []struct {
		w http.ResponseWriter
		r *http.Request
	}
	DeleteItemStub        func(w http.ResponseWriter, r *http.Request)
	deleteItemMutex       sync.RWMutex
	deleteItemArgsForCall []struct {
		w http.ResponseWriter
		r *http.Request
	}
	DeleteEntryStub        func(w http.ResponseWriter, r *http.Request)
	deleteEntryMutex       sync.RWMutex
	deleteEntryArgsForCall []struct {
		w http.ResponseWriter
		r *http.Request
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeService) GetItems(w http.ResponseWriter, r *http.Request) {
	fake.getItemsMutex.Lock()
	fake.getItemsArgsForCall = append(fake.getItemsArgsForCall, struct {
		w http.ResponseWriter
		r *http.Request
	}{w, r})
	fake.recordInvocation("GetItems", []interface{}{w, r})
	fake.getItemsMutex.Unlock()
	if fake.GetItemsStub != nil {
		fake.GetItemsStub(w, r)
	}
}

func (fake *FakeService) GetItemsCallCount() int {
	fake.getItemsMutex.RLock()
	defer fake.getItemsMutex.RUnlock()
	return len(fake.getItemsArgsForCall)
}

func (fake *FakeService) GetItemsArgsForCall(i int) (http.ResponseWriter, *http.Request) {
	fake.getItemsMutex.RLock()
	defer fake.getItemsMutex.RUnlock()
	return fake.getItemsArgsForCall[i].w, fake.getItemsArgsForCall[i].r
}

func (fake *FakeService) GetEntries(w http.ResponseWriter, r *http.Request) {
	fake.getEntriesMutex.Lock()
	fake.getEntriesArgsForCall = append(fake.getEntriesArgsForCall, struct {
		w http.ResponseWriter
		r *http.Request
	}{w, r})
	fake.recordInvocation("GetEntries", []interface{}{w, r})
	fake.getEntriesMutex.Unlock()
	if fake.GetEntriesStub != nil {
		fake.GetEntriesStub(w, r)
	}
}

func (fake *FakeService) GetEntriesCallCount() int {
	fake.getEntriesMutex.RLock()
	defer fake.getEntriesMutex.RUnlock()
	return len(fake.getEntriesArgsForCall)
}

func (fake *FakeService) GetEntriesArgsForCall(i int) (http.ResponseWriter, *http.Request) {
	fake.getEntriesMutex.RLock()
	defer fake.getEntriesMutex.RUnlock()
	return fake.getEntriesArgsForCall[i].w, fake.getEntriesArgsForCall[i].r
}

func (fake *FakeService) GetItem(w http.ResponseWriter, r *http.Request) {
	fake.getItemMutex.Lock()
	fake.getItemArgsForCall = append(fake.getItemArgsForCall, struct {
		w http.ResponseWriter
		r *http.Request
	}{w, r})
	fake.recordInvocation("GetItem", []interface{}{w, r})
	fake.getItemMutex.Unlock()
	if fake.GetItemStub != nil {
		fake.GetItemStub(w, r)
	}
}

func (fake *FakeService) GetItemCallCount() int {
	fake.getItemMutex.RLock()
	defer fake.getItemMutex.RUnlock()
	return len(fake.getItemArgsForCall)
}

func (fake *FakeService) GetItemArgsForCall(i int) (http.ResponseWriter, *http.Request) {
	fake.getItemMutex.RLock()
	defer fake.getItemMutex.RUnlock()
	return fake.getItemArgsForCall[i].w, fake.getItemArgsForCall[i].r
}

func (fake *FakeService) GetEntry(w http.ResponseWriter, r *http.Request) {
	fake.getEntryMutex.Lock()
	fake.getEntryArgsForCall = append(fake.getEntryArgsForCall, struct {
		w http.ResponseWriter
		r *http.Request
	}{w, r})
	fake.recordInvocation("GetEntry", []interface{}{w, r})
	fake.getEntryMutex.Unlock()
	if fake.GetEntryStub != nil {
		fake.GetEntryStub(w, r)
	}
}

func (fake *FakeService) GetEntryCallCount() int {
	fake.getEntryMutex.RLock()
	defer fake.getEntryMutex.RUnlock()
	return len(fake.getEntryArgsForCall)
}

func (fake *FakeService) GetEntryArgsForCall(i int) (http.ResponseWriter, *http.Request) {
	fake.getEntryMutex.RLock()
	defer fake.getEntryMutex.RUnlock()
	return fake.getEntryArgsForCall[i].w, fake.getEntryArgsForCall[i].r
}

func (fake *FakeService) CreateItem(w http.ResponseWriter, r *http.Request) {
	fake.createItemMutex.Lock()
	fake.createItemArgsForCall = append(fake.createItemArgsForCall, struct {
		w http.ResponseWriter
		r *http.Request
	}{w, r})
	fake.recordInvocation("CreateItem", []interface{}{w, r})
	fake.createItemMutex.Unlock()
	if fake.CreateItemStub != nil {
		fake.CreateItemStub(w, r)
	}
}

func (fake *FakeService) CreateItemCallCount() int {
	fake.createItemMutex.RLock()
	defer fake.createItemMutex.RUnlock()
	return len(fake.createItemArgsForCall)
}

func (fake *FakeService) CreateItemArgsForCall(i int) (http.ResponseWriter, *http.Request) {
	fake.createItemMutex.RLock()
	defer fake.createItemMutex.RUnlock()
	return fake.createItemArgsForCall[i].w, fake.createItemArgsForCall[i].r
}

func (fake *FakeService) CreateEntry(w http.ResponseWriter, r *http.Request) {
	fake.createEntryMutex.Lock()
	fake.createEntryArgsForCall = append(fake.createEntryArgsForCall, struct {
		w http.ResponseWriter
		r *http.Request
	}{w, r})
	fake.recordInvocation("CreateEntry", []interface{}{w, r})
	fake.createEntryMutex.Unlock()
	if fake.CreateEntryStub != nil {
		fake.CreateEntryStub(w, r)
	}
}

func (fake *FakeService) CreateEntryCallCount() int {
	fake.createEntryMutex.RLock()
	defer fake.createEntryMutex.RUnlock()
	return len(fake.createEntryArgsForCall)
}

func (fake *FakeService) CreateEntryArgsForCall(i int) (http.ResponseWriter, *http.Request) {
	fake.createEntryMutex.RLock()
	defer fake.createEntryMutex.RUnlock()
	return fake.createEntryArgsForCall[i].w, fake.createEntryArgsForCall[i].r
}

func (fake *FakeService) UpdateItem(w http.ResponseWriter, r *http.Request) {
	fake.updateItemMutex.Lock()
	fake.updateItemArgsForCall = append(fake.updateItemArgsForCall, struct {
		w http.ResponseWriter
		r *http.Request
	}{w, r})
	fake.recordInvocation("UpdateItem", []interface{}{w, r})
	fake.updateItemMutex.Unlock()
	if fake.UpdateItemStub != nil {
		fake.UpdateItemStub(w, r)
	}
}

func (fake *FakeService) UpdateItemCallCount() int {
	fake.updateItemMutex.RLock()
	defer fake.updateItemMutex.RUnlock()
	return len(fake.updateItemArgsForCall)
}

func (fake *FakeService) UpdateItemArgsForCall(i int) (http.ResponseWriter, *http.Request) {
	fake.updateItemMutex.RLock()
	defer fake.updateItemMutex.RUnlock()
	return fake.updateItemArgsForCall[i].w, fake.updateItemArgsForCall[i].r
}

func (fake *FakeService) UpdateEntry(w http.ResponseWriter, r *http.Request) {
	fake.updateEntryMutex.Lock()
	fake.updateEntryArgsForCall = append(fake.updateEntryArgsForCall, struct {
		w http.ResponseWriter
		r *http.Request
	}{w, r})
	fake.recordInvocation("UpdateEntry", []interface{}{w, r})
	fake.updateEntryMutex.Unlock()
	if fake.UpdateEntryStub != nil {
		fake.UpdateEntryStub(w, r)
	}
}

func (fake *FakeService) UpdateEntryCallCount() int {
	fake.updateEntryMutex.RLock()
	defer fake.updateEntryMutex.RUnlock()
	return len(fake.updateEntryArgsForCall)
}

func (fake *FakeService) UpdateEntryArgsForCall(i int) (http.ResponseWriter, *http.Request) {
	fake.updateEntryMutex.RLock()
	defer fake.updateEntryMutex.RUnlock()
	return fake.updateEntryArgsForCall[i].w, fake.updateEntryArgsForCall[i].r
}

func (fake *FakeService) DeleteItem(w http.ResponseWriter, r *http.Request) {
	fake.deleteItemMutex.Lock()
	fake.deleteItemArgsForCall = append(fake.deleteItemArgsForCall, struct {
		w http.ResponseWriter
		r *http.Request
	}{w, r})
	fake.recordInvocation("DeleteItem", []interface{}{w, r})
	fake.deleteItemMutex.Unlock()
	if fake.DeleteItemStub != nil {
		fake.DeleteItemStub(w, r)
	}
}

func (fake *FakeService) DeleteItemCallCount() int {
	fake.deleteItemMutex.RLock()
	defer fake.deleteItemMutex.RUnlock()
	return len(fake.deleteItemArgsForCall)
}

func (fake *FakeService) DeleteItemArgsForCall(i int) (http.ResponseWriter, *http.Request) {
	fake.deleteItemMutex.RLock()
	defer fake.deleteItemMutex.RUnlock()
	return fake.deleteItemArgsForCall[i].w, fake.deleteItemArgsForCall[i].r
}

func (fake *FakeService) DeleteEntry(w http.ResponseWriter, r *http.Request) {
	fake.deleteEntryMutex.Lock()
	fake.deleteEntryArgsForCall = append(fake.deleteEntryArgsForCall, struct {
		w http.ResponseWriter
		r *http.Request
	}{w, r})
	fake.recordInvocation("DeleteEntry", []interface{}{w, r})
	fake.deleteEntryMutex.Unlock()
	if fake.DeleteEntryStub != nil {
		fake.DeleteEntryStub(w, r)
	}
}

func (fake *FakeService) DeleteEntryCallCount() int {
	fake.deleteEntryMutex.RLock()
	defer fake.deleteEntryMutex.RUnlock()
	return len(fake.deleteEntryArgsForCall)
}

func (fake *FakeService) DeleteEntryArgsForCall(i int) (http.ResponseWriter, *http.Request) {
	fake.deleteEntryMutex.RLock()
	defer fake.deleteEntryMutex.RUnlock()
	return fake.deleteEntryArgsForCall[i].w, fake.deleteEntryArgsForCall[i].r
}

func (fake *FakeService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getItemsMutex.RLock()
	defer fake.getItemsMutex.RUnlock()
	fake.getEntriesMutex.RLock()
	defer fake.getEntriesMutex.RUnlock()
	fake.getItemMutex.RLock()
	defer fake.getItemMutex.RUnlock()
	fake.getEntryMutex.RLock()
	defer fake.getEntryMutex.RUnlock()
	fake.createItemMutex.RLock()
	defer fake.createItemMutex.RUnlock()
	fake.createEntryMutex.RLock()
	defer fake.createEntryMutex.RUnlock()
	fake.updateItemMutex.RLock()
	defer fake.updateItemMutex.RUnlock()
	fake.updateEntryMutex.RLock()
	defer fake.updateEntryMutex.RUnlock()
	fake.deleteItemMutex.RLock()
	defer fake.deleteItemMutex.RUnlock()
	fake.deleteEntryMutex.RLock()
	defer fake.deleteEntryMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ api.Service = new(FakeService)
