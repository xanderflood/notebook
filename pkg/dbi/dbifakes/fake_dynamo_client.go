// Code generated by counterfeiter. DO NOT EDIT.
package dbifakes

import (
	"sync"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/dynamodb"
	"github.com/xanderflood/notebook/pkg/dbi"
)

type FakeDynamoClient struct {
	QueryWithContextStub        func(ctx aws.Context, input *dynamodb.QueryInput, opts ...request.Option) (*dynamodb.QueryOutput, error)
	queryWithContextMutex       sync.RWMutex
	queryWithContextArgsForCall []struct {
		ctx   aws.Context
		input *dynamodb.QueryInput
		opts  []request.Option
	}
	queryWithContextReturns struct {
		result1 *dynamodb.QueryOutput
		result2 error
	}
	queryWithContextReturnsOnCall map[int]struct {
		result1 *dynamodb.QueryOutput
		result2 error
	}
	PutItemWithContextStub        func(ctx aws.Context, input *dynamodb.PutItemInput, opts ...request.Option) (*dynamodb.PutItemOutput, error)
	putItemWithContextMutex       sync.RWMutex
	putItemWithContextArgsForCall []struct {
		ctx   aws.Context
		input *dynamodb.PutItemInput
		opts  []request.Option
	}
	putItemWithContextReturns struct {
		result1 *dynamodb.PutItemOutput
		result2 error
	}
	putItemWithContextReturnsOnCall map[int]struct {
		result1 *dynamodb.PutItemOutput
		result2 error
	}
	GetItemWithContextStub        func(ctx aws.Context, input *dynamodb.GetItemInput, opts ...request.Option) (*dynamodb.GetItemOutput, error)
	getItemWithContextMutex       sync.RWMutex
	getItemWithContextArgsForCall []struct {
		ctx   aws.Context
		input *dynamodb.GetItemInput
		opts  []request.Option
	}
	getItemWithContextReturns struct {
		result1 *dynamodb.GetItemOutput
		result2 error
	}
	getItemWithContextReturnsOnCall map[int]struct {
		result1 *dynamodb.GetItemOutput
		result2 error
	}
	DeleteItemStub        func(ctx aws.Context, input *dynamodb.DeleteItemInput, opts ...request.Option) (*dynamodb.DeleteItemOutput, error)
	deleteItemMutex       sync.RWMutex
	deleteItemArgsForCall []struct {
		ctx   aws.Context
		input *dynamodb.DeleteItemInput
		opts  []request.Option
	}
	deleteItemReturns struct {
		result1 *dynamodb.DeleteItemOutput
		result2 error
	}
	deleteItemReturnsOnCall map[int]struct {
		result1 *dynamodb.DeleteItemOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDynamoClient) QueryWithContext(ctx aws.Context, input *dynamodb.QueryInput, opts ...request.Option) (*dynamodb.QueryOutput, error) {
	fake.queryWithContextMutex.Lock()
	ret, specificReturn := fake.queryWithContextReturnsOnCall[len(fake.queryWithContextArgsForCall)]
	fake.queryWithContextArgsForCall = append(fake.queryWithContextArgsForCall, struct {
		ctx   aws.Context
		input *dynamodb.QueryInput
		opts  []request.Option
	}{ctx, input, opts})
	fake.recordInvocation("QueryWithContext", []interface{}{ctx, input, opts})
	fake.queryWithContextMutex.Unlock()
	if fake.QueryWithContextStub != nil {
		return fake.QueryWithContextStub(ctx, input, opts...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.queryWithContextReturns.result1, fake.queryWithContextReturns.result2
}

func (fake *FakeDynamoClient) QueryWithContextCallCount() int {
	fake.queryWithContextMutex.RLock()
	defer fake.queryWithContextMutex.RUnlock()
	return len(fake.queryWithContextArgsForCall)
}

func (fake *FakeDynamoClient) QueryWithContextArgsForCall(i int) (aws.Context, *dynamodb.QueryInput, []request.Option) {
	fake.queryWithContextMutex.RLock()
	defer fake.queryWithContextMutex.RUnlock()
	return fake.queryWithContextArgsForCall[i].ctx, fake.queryWithContextArgsForCall[i].input, fake.queryWithContextArgsForCall[i].opts
}

func (fake *FakeDynamoClient) QueryWithContextReturns(result1 *dynamodb.QueryOutput, result2 error) {
	fake.QueryWithContextStub = nil
	fake.queryWithContextReturns = struct {
		result1 *dynamodb.QueryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeDynamoClient) QueryWithContextReturnsOnCall(i int, result1 *dynamodb.QueryOutput, result2 error) {
	fake.QueryWithContextStub = nil
	if fake.queryWithContextReturnsOnCall == nil {
		fake.queryWithContextReturnsOnCall = make(map[int]struct {
			result1 *dynamodb.QueryOutput
			result2 error
		})
	}
	fake.queryWithContextReturnsOnCall[i] = struct {
		result1 *dynamodb.QueryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeDynamoClient) PutItemWithContext(ctx aws.Context, input *dynamodb.PutItemInput, opts ...request.Option) (*dynamodb.PutItemOutput, error) {
	fake.putItemWithContextMutex.Lock()
	ret, specificReturn := fake.putItemWithContextReturnsOnCall[len(fake.putItemWithContextArgsForCall)]
	fake.putItemWithContextArgsForCall = append(fake.putItemWithContextArgsForCall, struct {
		ctx   aws.Context
		input *dynamodb.PutItemInput
		opts  []request.Option
	}{ctx, input, opts})
	fake.recordInvocation("PutItemWithContext", []interface{}{ctx, input, opts})
	fake.putItemWithContextMutex.Unlock()
	if fake.PutItemWithContextStub != nil {
		return fake.PutItemWithContextStub(ctx, input, opts...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.putItemWithContextReturns.result1, fake.putItemWithContextReturns.result2
}

func (fake *FakeDynamoClient) PutItemWithContextCallCount() int {
	fake.putItemWithContextMutex.RLock()
	defer fake.putItemWithContextMutex.RUnlock()
	return len(fake.putItemWithContextArgsForCall)
}

func (fake *FakeDynamoClient) PutItemWithContextArgsForCall(i int) (aws.Context, *dynamodb.PutItemInput, []request.Option) {
	fake.putItemWithContextMutex.RLock()
	defer fake.putItemWithContextMutex.RUnlock()
	return fake.putItemWithContextArgsForCall[i].ctx, fake.putItemWithContextArgsForCall[i].input, fake.putItemWithContextArgsForCall[i].opts
}

func (fake *FakeDynamoClient) PutItemWithContextReturns(result1 *dynamodb.PutItemOutput, result2 error) {
	fake.PutItemWithContextStub = nil
	fake.putItemWithContextReturns = struct {
		result1 *dynamodb.PutItemOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeDynamoClient) PutItemWithContextReturnsOnCall(i int, result1 *dynamodb.PutItemOutput, result2 error) {
	fake.PutItemWithContextStub = nil
	if fake.putItemWithContextReturnsOnCall == nil {
		fake.putItemWithContextReturnsOnCall = make(map[int]struct {
			result1 *dynamodb.PutItemOutput
			result2 error
		})
	}
	fake.putItemWithContextReturnsOnCall[i] = struct {
		result1 *dynamodb.PutItemOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeDynamoClient) GetItemWithContext(ctx aws.Context, input *dynamodb.GetItemInput, opts ...request.Option) (*dynamodb.GetItemOutput, error) {
	fake.getItemWithContextMutex.Lock()
	ret, specificReturn := fake.getItemWithContextReturnsOnCall[len(fake.getItemWithContextArgsForCall)]
	fake.getItemWithContextArgsForCall = append(fake.getItemWithContextArgsForCall, struct {
		ctx   aws.Context
		input *dynamodb.GetItemInput
		opts  []request.Option
	}{ctx, input, opts})
	fake.recordInvocation("GetItemWithContext", []interface{}{ctx, input, opts})
	fake.getItemWithContextMutex.Unlock()
	if fake.GetItemWithContextStub != nil {
		return fake.GetItemWithContextStub(ctx, input, opts...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getItemWithContextReturns.result1, fake.getItemWithContextReturns.result2
}

func (fake *FakeDynamoClient) GetItemWithContextCallCount() int {
	fake.getItemWithContextMutex.RLock()
	defer fake.getItemWithContextMutex.RUnlock()
	return len(fake.getItemWithContextArgsForCall)
}

func (fake *FakeDynamoClient) GetItemWithContextArgsForCall(i int) (aws.Context, *dynamodb.GetItemInput, []request.Option) {
	fake.getItemWithContextMutex.RLock()
	defer fake.getItemWithContextMutex.RUnlock()
	return fake.getItemWithContextArgsForCall[i].ctx, fake.getItemWithContextArgsForCall[i].input, fake.getItemWithContextArgsForCall[i].opts
}

func (fake *FakeDynamoClient) GetItemWithContextReturns(result1 *dynamodb.GetItemOutput, result2 error) {
	fake.GetItemWithContextStub = nil
	fake.getItemWithContextReturns = struct {
		result1 *dynamodb.GetItemOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeDynamoClient) GetItemWithContextReturnsOnCall(i int, result1 *dynamodb.GetItemOutput, result2 error) {
	fake.GetItemWithContextStub = nil
	if fake.getItemWithContextReturnsOnCall == nil {
		fake.getItemWithContextReturnsOnCall = make(map[int]struct {
			result1 *dynamodb.GetItemOutput
			result2 error
		})
	}
	fake.getItemWithContextReturnsOnCall[i] = struct {
		result1 *dynamodb.GetItemOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeDynamoClient) DeleteItem(ctx aws.Context, input *dynamodb.DeleteItemInput, opts ...request.Option) (*dynamodb.DeleteItemOutput, error) {
	fake.deleteItemMutex.Lock()
	ret, specificReturn := fake.deleteItemReturnsOnCall[len(fake.deleteItemArgsForCall)]
	fake.deleteItemArgsForCall = append(fake.deleteItemArgsForCall, struct {
		ctx   aws.Context
		input *dynamodb.DeleteItemInput
		opts  []request.Option
	}{ctx, input, opts})
	fake.recordInvocation("DeleteItem", []interface{}{ctx, input, opts})
	fake.deleteItemMutex.Unlock()
	if fake.DeleteItemStub != nil {
		return fake.DeleteItemStub(ctx, input, opts...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteItemReturns.result1, fake.deleteItemReturns.result2
}

func (fake *FakeDynamoClient) DeleteItemCallCount() int {
	fake.deleteItemMutex.RLock()
	defer fake.deleteItemMutex.RUnlock()
	return len(fake.deleteItemArgsForCall)
}

func (fake *FakeDynamoClient) DeleteItemArgsForCall(i int) (aws.Context, *dynamodb.DeleteItemInput, []request.Option) {
	fake.deleteItemMutex.RLock()
	defer fake.deleteItemMutex.RUnlock()
	return fake.deleteItemArgsForCall[i].ctx, fake.deleteItemArgsForCall[i].input, fake.deleteItemArgsForCall[i].opts
}

func (fake *FakeDynamoClient) DeleteItemReturns(result1 *dynamodb.DeleteItemOutput, result2 error) {
	fake.DeleteItemStub = nil
	fake.deleteItemReturns = struct {
		result1 *dynamodb.DeleteItemOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeDynamoClient) DeleteItemReturnsOnCall(i int, result1 *dynamodb.DeleteItemOutput, result2 error) {
	fake.DeleteItemStub = nil
	if fake.deleteItemReturnsOnCall == nil {
		fake.deleteItemReturnsOnCall = make(map[int]struct {
			result1 *dynamodb.DeleteItemOutput
			result2 error
		})
	}
	fake.deleteItemReturnsOnCall[i] = struct {
		result1 *dynamodb.DeleteItemOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeDynamoClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.queryWithContextMutex.RLock()
	defer fake.queryWithContextMutex.RUnlock()
	fake.putItemWithContextMutex.RLock()
	defer fake.putItemWithContextMutex.RUnlock()
	fake.getItemWithContextMutex.RLock()
	defer fake.getItemWithContextMutex.RUnlock()
	fake.deleteItemMutex.RLock()
	defer fake.deleteItemMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDynamoClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ dbi.DynamoClient = new(FakeDynamoClient)
